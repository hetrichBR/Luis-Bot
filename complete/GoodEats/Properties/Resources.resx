<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BOOKED_CONFIRMATION" xml:space="preserve">
    <value>Alright, you're all set for **{0}** on **{1}** at **{2}**.  I hope you have a great time!  Good-bye!</value>
  </data>
  <data name="CANCEL_CONFIRMATION" xml:space="preserve">
    <value>OK, I'll be here if you need me.  Good-bye!</value>
  </data>
  <data name="CONFIRMATION" xml:space="preserve">
    <value>Got it</value>
  </data>
  <data name="CONFIRMATION_UNRECOGNIZED" xml:space="preserve">
    <value>I'm sorry, I didn't understand your repsonse.  Click the **Reserve** button to confirm your reservation.</value>
  </data>
  <data name="CUISINE_CONFIRMATION" xml:space="preserve">
    <value>Alright, let's see what we can find.</value>
  </data>
  <data name="CUISINE_REQUEST" xml:space="preserve">
    <value>What type of food are you in the mood for?</value>
  </data>
  <data name="CUISINE_UNRECOGNIZED" xml:space="preserve">
    <value>Hmm, I can't seem to find any any *{0}* restaurants in your area.  Here are some options that I did find:</value>
  </data>
  <data name="GREETING" xml:space="preserve">
    <value>Sure, I can help you with that.</value>
  </data>
  <data name="LOCATION_CONFIRMATION" xml:space="preserve">
    <value>Alright, **{0}** it is. I'll look for options in  your area.</value>
  </data>
  <data name="LOCATION_REQUEST" xml:space="preserve">
    <value>Where will you be eating?  I'll look for restaurants in your area.</value>
  </data>
  <data name="LOCATION_UNRECOGNIZED" xml:space="preserve">
    <value>hmm, I can't seem to find any restaurants in that area.  What other city or town could I try?</value>
  </data>
  <data name="NONE" xml:space="preserve">
    <value>I'm sorry, I didn't understand.  You can ask me things like 'make me a reservation in Pittsburgh next Friday at 8:30 pm', or 'I'd like to make a reservation at an italian restaurant in Miami FL'.</value>
  </data>
  <data name="PARTY_REQUEST" xml:space="preserve">
    <value>How many people will be in your party?</value>
  </data>
  <data name="PARTY_SIZE_CONFIRMATION" xml:space="preserve">
    <value>Got it!</value>
  </data>
  <data name="PARTY_UNRECOGNIZED" xml:space="preserve">
    <value>I'm sorry, I didn't catch that.  How many people should I include on the reservation?</value>
  </data>
  <data name="RESERVATION_CONFIRMATION" xml:space="preserve">
    <value>OK, here's what I have.  Click 'Reserve' to confirm your reservation.</value>
  </data>
  <data name="RESTAURANT_CONFIRMATION" xml:space="preserve">
    <value>Sounds good...**{0}** it is!</value>
  </data>
  <data name="RESTAURANT_REQUEST" xml:space="preserve">
    <value>Here are some **{0}** restaurants I found near *{1}*:</value>
  </data>
  <data name="RESTAURANT_UNRECOGNIZED" xml:space="preserve">
    <value>I'm sorry, but I can't find *{0}*.  Here are some restaurants I did find in *{1}*:</value>
  </data>
  <data name="WHEN_CONFIRMATION" xml:space="preserve">
    <value>Got it.  I'll book the reservation for **{0}** at **{1}**</value>
  </data>
  <data name="WHEN_REQUEST" xml:space="preserve">
    <value>When will you be eating?</value>
  </data>
  <data name="WHEN_UNRECOGNIZED" xml:space="preserve">
    <value>I'm sorry, I didn't understand you.  When did you plan to eat?  I just need to know the day and time.</value>
  </data>
</root>